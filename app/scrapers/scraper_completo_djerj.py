import requests
import time
import os
import re
import unicodedata
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from io import StringIO

from app import db, create_app
from app.models import DiarioOficial, Advogado, AdvogadoPublicacao


# ========== FUN√á√ïES UTILIT√ÅRIAS ==========

def normalizar_texto(texto: str) -> str:
    """Remove acentos e converte para mai√∫sculas para busca mais confi√°vel."""
    texto = texto.upper()
    return unicodedata.normalize('NFKD', texto).encode('ASCII', 'ignore').decode('ASCII')


def enviar_whatsapp(telefone: str, mensagem: str):
    """Envia mensagem via API da UZAPI."""
    if not telefone:
        print("‚ö†Ô∏è N√∫mero de WhatsApp n√£o informado")
        return
    
    try:
        url = os.getenv("WHATSAPP_API_URL", "https://oabrj.uzapi.com.br:3333/sendText")
        headers = {"Content-Type": "application/json", "sessionkey": "oab"}
        payload = {"session": "oab", "number": telefone, "text": mensagem}
        
        r = requests.post(url, json=payload, headers=headers, timeout=15)
        if r.status_code == 200:
            print(f"‚úÖ Mensagem enviada para {telefone}")
        else:
            print(f"‚ùå Erro ({r.status_code}): {r.text}")
        time.sleep(3)  # Rate limiting aumentado para seguran√ßa
    except Exception as e:
        print(f"‚ùå Erro WhatsApp: {e}")
        time.sleep(5)


def extract_text_from_page(page):
    """Extrai texto de uma √∫nica p√°gina PDF de forma eficiente."""
    resource_manager = PDFResourceManager()
    fake_file_handle = StringIO()
    converter = TextConverter(resource_manager, fake_file_handle, laparams=LAParams())
    interpreter = PDFPageInterpreter(resource_manager, converter)
    
    interpreter.process_page(page)
    text = fake_file_handle.getvalue()
    
    converter.close()
    fake_file_handle.close()
    
    return text


# ========== DOWNLOAD PDF ==========

def baixar_pdf_durante_sessao(data):
    """Baixa o PDF durante a sess√£o do Selenium e salva em /tmp."""
    print(f'üîç Buscando PDF para {data.strftime("%d/%m/%Y")}...')

    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-gpu")

    driver = webdriver.Chrome(options=chrome_options)
    try:
        url = f"https://www3.tjrj.jus.br/consultadje/consultaDJE.aspx?dtPub={data.strftime('%d/%m/%Y')}&caderno=E&pagina=-1"
        driver.get(url)
        time.sleep(6)

        iframes = driver.find_elements(By.TAG_NAME, "iframe")
        for iframe in iframes:
            iframe_src = iframe.get_attribute("src") or ""
            if "pdf.aspx" in iframe_src:
                driver.switch_to.frame(iframe)
                time.sleep(4)

                iframe_html = driver.page_source
                pdf_urls = re.findall(r"(temp/[^\"']+\.pdf)", iframe_html, re.IGNORECASE)

                for pdf_path in pdf_urls:
                    pdf_url = f"https://www3.tjrj.jus.br/consultadje/{pdf_path.lstrip('/')}"
                    print(f"üéØ Tentando URL: {pdf_url}")

                    cookies = driver.get_cookies()
                    session = requests.Session()
                    for cookie in cookies:
                        session.cookies.set(cookie["name"], cookie["value"])

                    response = session.get(pdf_url, timeout=30)
                    if response.status_code == 200 and response.content.startswith(b"%PDF"):
                        os.makedirs("/tmp", exist_ok=True)
                        caminho_pdf = f"/tmp/diario_{data.strftime('%Y%m%d')}.pdf"
                        with open(caminho_pdf, "wb") as f:
                            f.write(response.content)
                        print(f"üíæ PDF salvo em {caminho_pdf}")
                        return caminho_pdf
        return None
    finally:
        driver.quit()


# ========== FUN√á√ÉO PRINCIPAL ==========

def executar_scraper_completo():
    hoje = datetime.now().date()
    start_time = time.time()
    print(f"üìÖ Processando DJERJ de {hoje.strftime('%d/%m/%Y')}")
    print(f"‚è∞ In√≠cio: {datetime.now().strftime('%H:%M:%S')}")

    # Verificar se di√°rio j√° foi processado
    diario_existente = DiarioOficial.query.filter_by(data_publicacao=hoje).first()
    if diario_existente:
        print("‚ö†Ô∏è Di√°rio j√° processado.")
        return

    # Baixar PDF
    caminho_pdf = baixar_pdf_durante_sessao(hoje)
    if not caminho_pdf:
        print("‚ùå Falha no download do PDF")
        return

    total_mencoes = 0
    advogados_encontrados_por_diario = {}

    try:
        # Iniciar transa√ß√£o principal
        db.session.begin()
        
        # Carregar todos os advogados uma √∫nica vez
        advogados = Advogado.query.all()
        print(f"üë®‚Äçüíº {len(advogados)} advogados cadastrados. Buscando men√ß√µes...")
        
        # Criar dicion√°rio para acesso r√°pido
        advogados_dict = {normalizar_texto(a.nome_completo): a for a in advogados}

        with open(caminho_pdf, "rb") as f:
            # Extrair todas as p√°ginas de uma vez para processamento eficiente
            pages = list(PDFPage.get_pages(f))
            total_pages = len(pages)
            print(f"üìÑ Processando {total_pages} p√°ginas...")
            
            for page_num, page in enumerate(pages, 1):
                try:
                    page_text = extract_text_from_page(page)
                    if not page_text or len(page_text.strip()) < 50:
                        continue

                    texto_norm_pagina = normalizar_texto(page_text)
                    
                    # Buscar por todos os advogados de forma eficiente
                    for nome_normalizado, advogado in advogados_dict.items():
                        if nome_normalizado in texto_norm_pagina:
                            ocorrencias = [m.start() for m in re.finditer(re.escape(nome_normalizado), texto_norm_pagina)]
                            
                            for posicao in ocorrencias:
                                total_mencoes += 1
                                inicio_ctx = max(0, posicao - 100)
                                fim_ctx = min(len(texto_norm_pagina), posicao + len(nome_normalizado) + 100)
                                contexto = texto_norm_pagina[inicio_ctx:fim_ctx].strip()
                                
                                publicacao = AdvogadoPublicacao(
                                    advogado_id=advogado.id,
                                    diario_id=None,
                                    data_publicacao=hoje,
                                    pagina=page_num,
                                    contexto=contexto
                                )
                                db.session.add(publicacao)

                                if advogado.id not in advogados_encontrados_por_diario:
                                     advogados_encontrados_por_diario[advogado.id] = {
                                         'obj': advogado,
                                         'mencoes': []
                                     }
                                advogados_encontrados_por_diario[advogado.id]['mencoes'].append(publicacao)
                                print(f"üìç Men√ß√£o de {advogado.nome_completo} encontrada na p√°gina {page_num}")
                    
                    # Commit a cada 10 p√°ginas para evitar transa√ß√µes muito longas
                    if page_num % 10 == 0:
                        db.session.commit()
                        db.session.begin_nested()
                        print(f"üîÑ Commit intermedi√°rio na p√°gina {page_num}/{total_pages}")
                
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao processar p√°gina {page_num}: {e}")
                    continue
        
        # Registrar o Di√°rio
        diario = DiarioOficial(
            data_publicacao=hoje,
            edicao="DJERJ",
            total_publicacoes=total_mencoes,
            arquivo_pdf=caminho_pdf
        )
        db.session.add(diario)
        db.session.commit()
        
        # Vincular publica√ß√µes ao di√°rio
        publicacoes_hoje = AdvogadoPublicacao.query.filter_by(data_publicacao=hoje).all()
        for publicacao in publicacoes_hoje:
            publicacao.diario_id = diario.id
        db.session.commit()

        # Enviar notifica√ß√µes
        notificacoes_enviadas = 0
        for advogado_id, data in advogados_encontrados_por_diario.items():
            advogado = data['obj']
            mencoes = data['mencoes']
            
            if not advogado.whatsapp:
                print(f"‚ö†Ô∏è Advogado {advogado.nome_completo} sem WhatsApp cadastrado")
                continue
            
            mensagens = []
            for i, mencao in enumerate(mencoes, 1):
                link = f"https://www3.tjrj.jus.br/consultadje/consultaDJE.aspx?dtPub={hoje.strftime('%d/%m/%Y')}&caderno=E&pagina={mencao.pagina}"
                
                mensagem_bloco = f"""*Publica√ß√£o {i} de {len(mencoes)}* no DJERJ de {hoje.strftime('%d/%m/%Y')}.

*üìÑ P√°gina:* {mencao.pagina}

*üìñ Trecho encontrado:*
"{mencao.contexto}"

*üîó Link direto:* {link}"""

                mensagens.append(mensagem_bloco)
            
            mensagem_final = f"""*üìã Recorte Digital - OABRJ* üéØ

*Ol√°, {advogado.nome_completo}.*

Foram encontradas {len(mencoes)} publica√ß√µes em seu nome.
------------------------------------
{"\n\n".join(mensagens)}

*üíº D√∫vidas?* Entre em contato com a OABRJ.

*OABRJ - Recorte Digital* üìä
*Monitoramento inteligente de publica√ß√µes*"""
            
            enviar_whatsapp(advogado.whatsapp, mensagem_final)
            notificacoes_enviadas += 1

        elapsed_time = time.time() - start_time
        print(f"‚úÖ Processamento conclu√≠do em {elapsed_time:.2f} segundos")
        print(f"üìä Estat√≠sticas: {total_mencoes} men√ß√µes, {notificacoes_enviadas} notifica√ß√µes enviadas")

    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Erro fatal: {e}")
        raise
    finally:
        # Limpeza do arquivo tempor√°rio
        if 'caminho_pdf' in locals() and os.path.exists(caminho_pdf):
            os.remove(caminho_pdf)
            print(f"üßπ PDF tempor√°rio removido: {caminho_pdf}")
        
        print(f"‚è∞ Fim: {datetime.now().strftime('%H:%M:%S')}")


# ========== MAIN ==========

if __name__ == "__main__":
    app = create_app()
    with app.app_context():
        executar_scraper_completo()
